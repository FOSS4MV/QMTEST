$catalog QMTestResult global
class QMTestResult

    print fFailures, fErrors, fListeners, fRunTests, fStop
    
    public sub create.object()
        fFailures = object("QMArrayList")
        fErrors = object("QMArrayList")
        fListeners = object("QMArrayList")
        fRunTests = 0
        fStop = @false
    end
    
    public sub addError(test, t)
        fErrors->add(object("TestFailure", test, t))
        for i = 1 to fListeners->getSize()
            fListeners->get(i)->addError(test, t)
        next i
    end
        
    public sub addFailure(test, t)
        fFailures->add(object("TestFailure", test, t))
        for i = 1 to fListeners->getSize()
            fListeners->get(i)->addFailure(test, t)
        next i
    end
    
    public sub addListener(listener)
        fListeners->add(listener)
    end
    
    public sub removeListener(listener)
        fListeners->remove(listener)
    end
    
    public sub endTest(test)
        for i = 1 to fListeners->getSize()
            fListeners->get(i)->endTest(test)
        next i
    end
    
    public function errorCount()
        return fErrors->getSize()
    end
    
    public function errors()
        return fErrors
    end
    
    public function failureCount()
        return fFailures->getSize()
    end
    
    public function failures()
        return fFailures
    end
    
    public sub run(test)
        me->startTest(test)
        try
            test->runBare()
        catch "QMAssertionFailedError"
            me->addFailure(test, object(@EXCEPTION, @EXCEPTION.DATA))
        catch "QMThrowable"
            me->addError(test, object(@EXCEPTION, @EXCEPTION.DATA))
        end
        me->endTest(test)
    end
    
end
